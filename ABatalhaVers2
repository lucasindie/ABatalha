package Game;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JFrame;

import javax.swing.Timer;
public class ABatalhaVers2 extends JPanel implements ActionListener, KeyListener {
	 
	  
	Rectangle platform = new Rectangle(170, 34, 40, 50);
	
	private final int B_WIDTH = 350;
	private final int B_HEIGHT = 350;
	private final int INICIAL_X = 170;
	private final int INICIAL_Y= 34;
	private final int INICIAL_LARGURA = 40;
	private final int INICIAL_ALTURA = 50;
	private final int DELAY = 50; //controla  a velocidade da anima��o
	private Timer timer;
	private int x, y, largura, altura;
        private int player_x, player_y;
        private boolean cenario1Menu;
	private int largura_janela;
        private int coord_menuponteiro_y, menu_op;
        private int barra_energ_largura;
        private boolean projetil;
        private int projetil_x, projetil_y;
        private Color projetil_explosion;
        
       

	/*Nessa vers�o: "A Batalha vers�o 2" /_Lucas, o loop utilizado � o: Swing timer, diferente da Vers�o 1 nesse podemos controlar a velocidade atrav�s do DELAY
	 * da anima��o.
	 */
	public ABatalhaVers2(){
		//setSize(new Dimension(500, 400));
		//setPreferredSize(new Dimension(500, 400));
                
                largura_janela = 500;
              
		setBounds(0, 0, largura_janela, 400);
		setBackground(Color.gray);
		setFocusable(true);
		
		
		x = INICIAL_X;
		y = INICIAL_Y;
		largura = INICIAL_LARGURA;
		altura = INICIAL_ALTURA;
	
          
                    
                cenario1Menu = true;
                
                coord_menuponteiro_y = 135;
                menu_op = 1;
                
                barra_energ_largura = 0;
                
                projetil = false;
                
                projetil_explosion = Color.orange;
                
                
                
		//Swing Timer: Respons�vel pela anima��o.		
		timer = new Timer(DELAY, this);// aqui podemos controlar a velocidade da anima��o, atrav�s da vari�vel DELAY
		timer.start(); //O m�todo actionPerformed()  � automaticamente e repetidamente invocado pelo uso do timer.
		 
                player_x = 150;
                player_y = 200;
                
                projetil_x = player_x + 10;
                projetil_y = player_y - 20;
	 
		 addKeyListener(this);
		 
	}

 
 public static void main(String[] args) {
	 
	ABatalhaVers2 gamemain = new ABatalhaVers2();
	 
	 
	 JFrame f = new JFrame("A Batalha versao 2 by: lucasindiesh1p.wordpress.com/");
		// f.setTitle("Game");
	 f.add(gamemain);
	 f.setSize(700, 500);
	 f.setLayout(null);
	 f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	 //f.pack(); //ajusta os componentes na dimens�o do jpanel  
	 f.setVisible(true);
        
 }
 
 
 public void desenharEfeito(Graphics g) {
	 g.setColor(projetil_explosion);
	 g.fillOval(x, y, largura, altura);
	 Toolkit.getDefaultToolkit().sync();//sem essa linha a animacao nao vai ficar boa no Linux.
 }
 
 @Override
 public void paintComponent(Graphics g) {
     super.paintComponent(g);

     g.setColor(Color.BLACK);
	 g.fillRect(0, 0, getWidth(), getHeight());
	 
	 g.setColor(Color.white);
	 g.setFont(new Font("Century Gothic", Font.BOLD, 10));
	 g.drawString("A Batalha - metodo de loop: Swing timer", 0, 10);
	 
         
        if(cenario1Menu == true){
	 g.setFont(new Font("Times new Roman", Font.BOLD, 20));
	 g.drawString("Novo Jogo (aperte enter para começar)", 50, 150);
         g.drawString("Carregar Jogo Salvo", 50, 175);
         g.drawString("Sair", 50, 195);
         
         //seletor de controle para usuário no menu
         g.setColor(Color.blue);
	g.fillOval(20, coord_menuponteiro_y, 10, 10);
        }
          
         
      if(cenario1Menu == false){
         g.setColor(Color.white);
	 g.setFont(new Font("Century Gothic", Font.BOLD, 10));
	 g.drawString("Aperte 'A' para ir para mover para esquerda ou 'D' para mover para direita", 0, 300);
	 
	
	g.setColor(Color.white);
	g.fillRect(platform.x, platform.y, platform.width, platform.height);
        
        //exibir coorenadas do alvo
        g.setColor(Color.white);
	 g.setFont(new Font("Century Gothic", Font.BOLD, 10));
	 g.drawString("plataform_x:"+platform.x, 300, 20);
         g.drawString("plataform_y:"+platform.y, 300, 40);
         g.drawString("plataform_width:"+platform.width, 300, 60);
         g.drawString("plataform_height:"+platform.height, 300, 80);
         
	
	g.setColor(Color.gray);
	g.fillOval(player_x, player_y, platform.width, platform.height);
       
        
        
        //barra energética
        g.setColor(Color.orange);
        g.drawString("Aperte a tecla 'Espaço ou barra' para lançar o projetil", 0, 340);
        g.setColor(Color.green);
        g.fillRect(5, 350, 450, 40);
        
        g.setColor(Color.white);
        g.fillRect(10,355, barra_energ_largura, 30);
        
        //projetil
        if(projetil==true){
        g.setColor(Color.green);
        g.fillOval(projetil_x, projetil_y, 20, 20);
            
        //Exibir coordenadas do projetil:
        g.setColor(Color.white);
	 g.setFont(new Font("Century Gothic", Font.BOLD, 10));
	 g.drawString("projetil_x:"+projetil_x, 0, 20);
         g.drawString("projetil_y:"+projetil_y, 0, 40);
        
        }
       
                         
     desenharEfeito(g); //do alvo
 }
         
 }
 
 
public void actionPerformed(ActionEvent e) {
//efeito animado do alvo
x -= 1;
largura += 2;
y -= 1;
altura += 2;
int pulso = 0;
if(y <INICIAL_Y - 10) {
	y = INICIAL_Y;
	altura = INICIAL_ALTURA;
	largura = INICIAL_LARGURA;
	if(x < INICIAL_X ){
		x = INICIAL_X;
                if(projetil_explosion == Color.red)
                    projetil_explosion = Color.orange;
        }
        
       
		 
              
   
               
}

//efeito animado da barra energética
barra_energ_largura += 29;
if(barra_energ_largura == 435)
    barra_energ_largura = 0;


/*bugado :
if (barra_energ_largura == 435)
    barra_energ_largura -= 29;

 else
    barra_energ_largura += 29;
*/

    



 //colisao com a borda:
if(player_x>=largura_janela -45)
    player_x -= 20;

if(player_x<=0 +5)
    player_x += 20;


//efeito animado do projetil
if(projetil == true)
    projetil_y -= 10;

//colisão do projetil com o topo da tela
if(projetil_y == 0){
    
    projetil_y = player_y - 20;
    projetil = false;
}


//colisão do projetil com o Alvo **só falta agora criar a colisão para o tamanho da imagem
   // coordenadas da ultima borda do alvo: 50y (descobri printando as coordenadas e anotando a coordenada que o projetil encosta no alvo)
   //já a coordenada x, a cadada vez que o jogador anda para a direita coloquei para andar +4 de coordenadas, e entao verifiquei aa coordenada da borda mais esquerda do alvo e a mais a direita, entre elas o jogador so podera atirar de +4 em +4 coorenadas
   // ou seja de 170x a 198x, andando de 4 em 4. dá:162, 166, 170, 174, 178, 182, 186, 190, 194, 198, 202.

if(this.projetil_y == 50  && (this.projetil_x == 162|| this.projetil_x == 166  || this.projetil_x == 170 || this.projetil_x == 174 || this.projetil_x == 178 || this.projetil_x == 182 || this.projetil_x == 186 || this.projetil_x == 190 || this.projetil_x == 194 || this.projetil_x == 198|| this.projetil_x == 202)){ 
// se fosse apenas as coordenadas principais seria: if(this.projetil_y == 30 && this.projetil_x == 170){ 
    this.projetil_explosion = Color.red;
   this.projetil_x = player_x;
    this.projetil_y = player_y - 20;
    this.projetil = false;
     
            
}


        
    

	repaint(); //Chama m�todo  paintComponent
}
 
 
    public void keyTyped(KeyEvent e) {
         
    }


    public void keyPressed(KeyEvent e) {
     int c = e.getKeyCode();

	 if(c == KeyEvent.VK_A) {
		player_x -= 4;
                
                
	
	 }
	 if(c == KeyEvent.VK_D) {
		player_x += 4;
                
                
               
		
	 }
         
         if(c == KeyEvent.VK_W){
                coord_menuponteiro_y -= 25;
                
             if(coord_menuponteiro_y <= 135){
                 coord_menuponteiro_y = 135;

                 menu_op = 1;
                               }
             else{
            menu_op = 2;
             }
             
         }
         
         if(c== KeyEvent.VK_S){
             coord_menuponteiro_y += 25;
             
             if(coord_menuponteiro_y >= 185){
                 coord_menuponteiro_y = 185;
                 menu_op = 3;
             }
             else{
                 menu_op = 2;
                 if(coord_menuponteiro_y >= 185)
                 menu_op = 3;
                 
             }
         }
          if(c == KeyEvent.VK_ENTER){
              if(menu_op == 1){
                  //novo jogo
             if(cenario1Menu == true)
                 cenario1Menu = false;
               
             else
                 cenario1Menu = true;
          }
              if(menu_op == 2){
              //continuar
              }
              
              if(menu_op == 3){
              //Sair
               System.exit(0);
              }
              
         }
         
          if(c == KeyEvent.VK_SPACE){
              projetil_x = this.player_x;
              if(projetil == false)
          projetil = true;
         // else
            //      projetil = false;
            
           
          
	 }
    }

    
    public void keyReleased(KeyEvent e) {
         
    }

    
 
}
